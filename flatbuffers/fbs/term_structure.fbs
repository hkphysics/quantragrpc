include "enums.fbs";
include "common.fbs";
//include "term_structure_points.fbs";

namespace quantra;

table Schedule{
    calendar:enums.Calendar;
    effective_date:string;
    termination_date:string;
    frequency:enums.Frequency;
    convention:enums.BusinessDayConvention;
    termination_date_convention:enums.BusinessDayConvention;
    date_generation_rule:enums.DateGenerationRule;
    end_of_mont:bool;
}

table DepositHelper {
    rate:float;
    tenor_time_unit:enums.TimeUnit;
    tenor_number: int;
    fixing_days: int;
    calendar:enums.Calendar;
    business_day_convention:enums.BusinessDayConvention;
    day_counter:enums.DayCounter;
}

table FRAHelper {
    rate:float;
    months_to_start:int; 
    months_to_end:int; 
    fixing_days:int;
    calendar:enums.Calendar;
    business_day_convention:enums.BusinessDayConvention;
    day_counter:enums.DayCounter;
}

table FutureHelper {
    rate: float;
    future_start_date: string;
    future_months: int;
    calendar:enums.Calendar;
    business_day_convention:enums.BusinessDayConvention;
    day_counter:enums.DayCounter;
}

table SwapHelper {
    rate:float;
    tenor_time_unit:enums.TimeUnit;
    tenor_number: int;
    calendar:enums.Calendar;
    sw_fixed_leg_frequency:enums.Frequency;
    sw_fixed_leg_convention:enums.BusinessDayConvention;
    sw_fixed_leg_day_counter:enums.DayCounter;
    sw_floating_leg_index:enums.Ibor;
    spread:float;
    fwd_start_days:int; 
}

table BondHelper {
    rate:float;
    settlement_days:int;
    face_amount:float;
    schedule:Schedule;
    coupon_rate:float;
    day_counter:enums.DayCounter;
    business_day_convention:enums.BusinessDayConvention;
    redemption:float;
    issue_date:string; 
}

union Point { DepositHelper, FRAHelper, FutureHelper, SwapHelper, BondHelper }

table TermStructure {
    id:string;
    day_counter:enums.DayCounter;
    interpolator:enums.Interpolator;
    bootstrap_trait:enums.BootstrapTrait;
    points:[Point];
    as_of_date:string;
}