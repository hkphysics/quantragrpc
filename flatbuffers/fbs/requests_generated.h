// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUESTS_QUANTRA_H_
#define FLATBUFFERS_GENERATED_REQUESTS_QUANTRA_H_

#include "flatbuffers/flatbuffers.h"

#include "bonds_generated.h"
#include "common_generated.h"
#include "enums_generated.h"
#include "term_structure_generated.h"
#include "term_structure_points_generated.h"

namespace quantra {

struct PriceFixedRateBond;
struct PriceFixedRateBondBuilder;

struct PriceFixedRateBond FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PriceFixedRateBondBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRICING = 4,
    VT_FIXED_RATE_BOND = 6,
    VT_TERM_STRUCTURE = 8,
    VT_YIELD = 10
  };
  const quantra::Pricing *pricing() const {
    return GetPointer<const quantra::Pricing *>(VT_PRICING);
  }
  const quantra::FixedRateBond *fixed_rate_bond() const {
    return GetPointer<const quantra::FixedRateBond *>(VT_FIXED_RATE_BOND);
  }
  const quantra::TermStructure *term_structure() const {
    return GetPointer<const quantra::TermStructure *>(VT_TERM_STRUCTURE);
  }
  const quantra::Yield *yield() const {
    return GetPointer<const quantra::Yield *>(VT_YIELD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PRICING) &&
           verifier.VerifyTable(pricing()) &&
           VerifyOffset(verifier, VT_FIXED_RATE_BOND) &&
           verifier.VerifyTable(fixed_rate_bond()) &&
           VerifyOffset(verifier, VT_TERM_STRUCTURE) &&
           verifier.VerifyTable(term_structure()) &&
           VerifyOffset(verifier, VT_YIELD) &&
           verifier.VerifyTable(yield()) &&
           verifier.EndTable();
  }
};

struct PriceFixedRateBondBuilder {
  typedef PriceFixedRateBond Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pricing(flatbuffers::Offset<quantra::Pricing> pricing) {
    fbb_.AddOffset(PriceFixedRateBond::VT_PRICING, pricing);
  }
  void add_fixed_rate_bond(flatbuffers::Offset<quantra::FixedRateBond> fixed_rate_bond) {
    fbb_.AddOffset(PriceFixedRateBond::VT_FIXED_RATE_BOND, fixed_rate_bond);
  }
  void add_term_structure(flatbuffers::Offset<quantra::TermStructure> term_structure) {
    fbb_.AddOffset(PriceFixedRateBond::VT_TERM_STRUCTURE, term_structure);
  }
  void add_yield(flatbuffers::Offset<quantra::Yield> yield) {
    fbb_.AddOffset(PriceFixedRateBond::VT_YIELD, yield);
  }
  explicit PriceFixedRateBondBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PriceFixedRateBond> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PriceFixedRateBond>(end);
    return o;
  }
};

inline flatbuffers::Offset<PriceFixedRateBond> CreatePriceFixedRateBond(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<quantra::Pricing> pricing = 0,
    flatbuffers::Offset<quantra::FixedRateBond> fixed_rate_bond = 0,
    flatbuffers::Offset<quantra::TermStructure> term_structure = 0,
    flatbuffers::Offset<quantra::Yield> yield = 0) {
  PriceFixedRateBondBuilder builder_(_fbb);
  builder_.add_yield(yield);
  builder_.add_term_structure(term_structure);
  builder_.add_fixed_rate_bond(fixed_rate_bond);
  builder_.add_pricing(pricing);
  return builder_.Finish();
}

}  // namespace quantra

#endif  // FLATBUFFERS_GENERATED_REQUESTS_QUANTRA_H_
